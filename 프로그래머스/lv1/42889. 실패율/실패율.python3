def solution(N, stages):
    # 스테이지 정보를 담을 딕셔너리
    stages_count = {}
    # 스테이지 수만큼 반복
    for i in range(1, N + 1):
        # 스테이지 정보 생성(all:총도전, stay:도전중, avg:실패율)
        stages_count[i] = {'all' : 0, 'stay' : 0, 'avg' : 0}
        # 스테이지 정보 갱신
        for stage in stages:
            # 현재 스테이지와 같으면
            if i == stage:
                # 총도전과 도전중 +1
                stages_count[i]['all'] += 1
                stages_count[i]['stay'] += 1 
            # 현재 스테이지보다 높으면
            elif i < stage:
                # 총도전 +1
                stages_count[i]['all'] += 1
        # 스테이지 실패율 계산
        if stages_count[i]['all']:
            stages_count[i]['avg'] = stages_count[i]['stay'] / stages_count[i]['all']
        else:
            stages_count[i]['avg'] = 0
    # 실패율 기준으로 내림차순 정렬
    answer = sorted(stages_count.items(), key=lambda x: x[1]['avg'], reverse=True)
    
    # 스테이지 반환
    return [i[0] for i in answer]